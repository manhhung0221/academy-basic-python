name: Deploy MkDocs (auto-detect target)

on:
  push:
    branches: [ main ]
    paths:
      - 'site/**'                      # ch·ªâ ch·∫°y khi site/ ƒë√£ build thay ƒë·ªïi
      - 'mkdocs.yml'                   # ƒë·ªïi site_url th√¨ t·ª± deploy l·∫°i
      - '.github/workflows/deploy-mkdocs.yml'
  workflow_dispatch:
    inputs:
      target_subpath:
        description: "Ghi ƒë√® subpath deploy (vd: academy/python/basic). ƒê·ªÉ tr·ªëng s·∫Ω l·∫•y t·ª´ mkdocs.yml: site_url."
        required: false
        default: ""

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify prebuilt site exists
        run: |
          test -f site/index.html || (echo "‚ùå Missing prebuilt site/. Run 'mkdocs build' locally and commit site/." && exit 1)

      # Parse mkdocs.yml ƒë·ªÉ l·∫•y site_url -> subpath "/academy/python/basic"
      - name: Detect deploy subpath from mkdocs.yml (if not overridden)
        id: detect
        shell: bash
        run: |
          # N·∫øu c√≥ input th·ªß c√¥ng th√¨ d√πng lu√¥n:
          if [ -n "${{ github.event.inputs.target_subpath }}" ]; then
            SUBPATH="${{ github.event.inputs.target_subpath }}"
          else
            # ƒê·ªçc site_url trong mkdocs.yml b·∫±ng python (tr√°nh c√†i yq)
            PYOUT=$(python - << 'PY'
import sys, yaml, pathlib, urllib.parse
p = pathlib.Path("mkdocs.yml")
data = yaml.safe_load(p.read_text(encoding="utf-8"))
url = (data or {}).get("site_url","").strip()
# L·∫•y path t·ª´ URL, b·ªè slash ƒë·∫ßu/cu·ªëi
path = urllib.parse.urlparse(url).path.strip("/")
print(path)
PY
)
            SUBPATH="$PYOUT"
          fi

          # Chu·∫©n h√≥a: n·∫øu tr·ªëng -> deploy v√†o root c·ªßa VPS_TARGET_ROOT
          if [ -z "$SUBPATH" ]; then
            echo "subpath=" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è site_url kh√¥ng c√≥ path -> s·∫Ω deploy v√†o ROOT: ${{ secrets.VPS_TARGET_ROOT }}"
          else
            echo "subpath=$SUBPATH" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è X√°c ƒë·ªãnh subpath: $SUBPATH"
          fi

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Compute TARGET dir on VPS
        id: target
        run: |
          ROOT="${{ secrets.VPS_TARGET_ROOT }}"
          SUB="${{ steps.detect.outputs.subpath }}"
          if [ -z "$SUB" ]; then
            TARGET="$ROOT"
          else
            TARGET="$ROOT/$SUB"
          fi
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "üìÅ TARGET = $TARGET"

      - name: Ensure target exists
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p '${{ steps.target.outputs.target }}'"

      # Rsync & --delete ƒë·ªÉ lu√¥n ƒë·ªìng b·ªô
      - name: Rsync site/ to VPS
        run: |
          rsync -az --delete --omit-dir-times --no-perms --no-owner --no-group \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            site/ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:"${{ steps.target.outputs.target }}"/

      # (Tu·ª≥ ch·ªçn) Reload Nginx n·∫øu b·∫°n serve qua Nginx
      # - name: Reload Nginx
      #   run: |
      #     ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no \
      #       ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "sudo systemctl reload nginx"
